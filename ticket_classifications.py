# -*- coding: utf-8 -*-
"""Ticket Classifications.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ME7FhFKUCSpC6udTmQYHJ8nakfbZNl-m
"""

import numpy as np
import pandas as pd
import warnings
from google.colab import files
import io

file_upload=files.upload()

input_file=io.BytesIO(file_upload['supportTicketData.csv'])

TicketData=pd.read_csv(input_file)
print('No of rows before duplicates',TicketData.shape)
TicketData=TicketData.drop_duplicates()
print('No of rows after removings duplicates',TicketData.shape)
TicketData.head(5)

TicketData['body']=TicketData['body'].str.replace("[\*%/&!@$:-?,<>()-]",'',regex=True).astype(str)
# TicketData['body']=TicketData['body'].str.replace('\d+','',regex=True).astype(str)
# TicketData['body']=TicketData['body'].str.replace(r'\b\w{1,3}\b', ' ',regex=True).astype(str)
# TicketData['body']=TicketData['body'].str.replace(r'[^a-z A-Z]',r' ',regex=True).astype(str)

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.feature_extraction._stop_words import ENGLISH_STOP_WORDS
corpus = TicketData['body'].values
vectorizer = TfidfVectorizer(stop_words='english')
X = vectorizer.fit_transform(corpus)
print(vectorizer.get_feature_names())

import pandas as pd
VectorizedText=pd.DataFrame(X.toarray(), columns=vectorizer.get_feature_names())
VectorizedText['originalText']=pd.Series(corpus)
VectorizedText

DataForML=pd.DataFrame(X.toarray(), columns=vectorizer.get_feature_names())
DataForML['Priority']=TicketData['urgency']
DataForML.head()

corpus = TicketData['body'].values
vectorizer = TfidfVectorizer(stop_words='english')
X = vectorizer.fit_transform(corpus)
DataForML=pd.DataFrame(X.toarray(), columns=vectorizer.get_feature_names())
DataForML['Priority']=TicketData['urgency']
print(DataForML.shape)
DataForML.head()



"""**Applying PCA**"""

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.feature_extraction._stop_words import ENGLISH_STOP_WORDS
corpus = TicketData['body'].values
vectorizer = TfidfVectorizer(stop_words='english')
X = vectorizer.fit_transform(corpus)
DataForML=pd.DataFrame(X.toarray(), columns=vectorizer.get_feature_names())
DataForML['Priority']=TicketData['urgency']
print(DataForML.shape)
DataForML.head()

from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
TargetVariable=DataForML.columns[-1]
Predictors=DataForML.columns[:-1]
X=DataForML[Predictors].values
Y=DataForML[TargetVariable].values
NumComponents=4500
pca=PCA(n_components=NumComponents)
pca_fit=pca.fit(X)
reduced_x=pca_fit.transform(X)
var_explained_cum=np.cumsum(np.round(pca.explained_variance_ratio_,decimals=4)*100)
print(var_explained_cum)
plt.plot( range(1,len(var_explained_cum)+1), var_explained_cum )
plt.xlabel('Number of components')
plt.ylabel('% Variance explained')

#Num Of Dimentions selection based on the above curve
Num_Newcomponents=2100
pca2=PCA(n_components=Num_Newcomponents)
pca1_fit=pca2.fit(X)
reduced_x1=pca1_fit.transform(X)

X=reduced_x1
Predictors=pd.Series(['PC']*Num_Newcomponents).str.cat(pd.Series(range(1,Num_Newcomponents+1)).apply(str)).values
Predictors



"""**Standardization**"""

from sklearn.preprocessing import StandardScaler,MinMaxScaler
PredictorScaler=MinMaxScaler()
PredictorScalerFit=PredictorScaler.fit(X)
X=PredictorScalerFit.transform(X)
from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.3,random_state=450)
print(X_train.shape)
print(Y_train.shape)
print(X_test.shape)
print(Y_test.shape)



"""**Applying Machine Learning Model**"""



"""**Naive Bayes**"""

from sklearn.naive_bayes import GaussianNB, MultinomialNB
clf=GaussianNB()
print(clf)
NB=clf.fit(X_train,Y_train)
prediction=NB.predict(X_test)
TD=pd.DataFrame(data=X_test, columns=Predictors)
TD['TargetVariable']=Y_test
TD['Prediction']=prediction
print(TD.head())
from sklearn import metrics
print(metrics.classification_report(Y_test, prediction))
print(metrics.confusion_matrix(Y_test, prediction))
F1_Score=metrics.f1_score(Y_test, prediction, average='weighted')
print('Accuracy of the model on Testing Sample Data:', round(F1_Score,2))



"""**Logistic Regression**"""

from sklearn.linear_model import LogisticRegression
clf=LogisticRegression(C=5,penalty='l2',solver='saga')
LOG=clf.fit(X_train,Y_train)
prediction=LOG.predict(X_test)
TDR=pd.DataFrame(data=X_test,columns=Predictors)
TDR[TargetVariable]=Y_test
TDR['Prediction']=prediction
print(TDR.head())
from sklearn import metrics
print(metrics.classification_report(Y_test,prediction))
print(metrics.confusion_matrix(prediction,Y_test))
F1_Score=metrics.f1_score(Y_test, prediction, average='weighted')
print('Accuracy of the model on Testing Sample Data:', round(F1_Score,2))



"""**Decision Trees**"""

# Commented out IPython magic to ensure Python compatibility.
from sklearn import tree
clf=tree.DecisionTreeClassifier(max_depth=5,criterion='gini')
DT=clf.fit(X_train,Y_train)
prediction=DT.predict(X_test)
from sklearn import metrics
print(metrics.classification_report(Y_test, prediction))
print(metrics.confusion_matrix(Y_test, prediction))
F1_Score=metrics.f1_score(Y_test, prediction, average='weighted')
print('Accuracy of the model on Testing Sample Data:', round(F1_Score,2))
# %matplotlib inline
feature_importances = pd.Series(DT.feature_importances_, index=Predictors)
feature_importances.nlargest(10).plot(kind='barh')

from sklearn.linear_model import LogisticRegression
clf = LogisticRegression(C=5,penalty='l2', solver='newton-cg')
FinalModel=clf.fit(X,Y)



"""**Making predictions for New Cases**"""

def FunctionPredictUrgency(inpText):
  X=vectorizer.transform(inpText)
  reduced_X = pca_fit.transform(X.toarray())
  X=PredictorScalerFit.transform(reduced_X)
  Prediction=FinalModel.predict(X)
  Result=pd.DataFrame(data=inpText, columns=['Text'])
  Result['Prediction']=Prediction
  return(Result)
NewTicket=["internet is too slow", "Please help to resolve system issue","webcam is not working","Keyboard is not working","system down please restart it"]
PredictionResults=FunctionPredictUrgency(inpText=NewTicket)
PredictionResults

